{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Step: Load data and packages"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "%load_ext lab_black"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import pyodbc\n",
        "import numpy as np\n",
        "from skimpy import clean_columns\n",
        "from pyprojroot import here\n",
        "import os\n",
        "import PyPDF2\n",
        "from nltk.tokenize import word_tokenize\n",
        "from sentence_transformers import SentenceTransformer\n",
        "import docx\n",
        "import nltk\n",
        "from PyPDF2 import PdfReader\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.probability import FreqDist\n",
        "from analysis.fun_text_analyzer import text_analyzer\n",
        "\n",
        "\n",
        "nltk.download(\"punkt\")\n",
        "nltk.download(\"stopwords\")\n",
        "path_data = here(\"./data\")\n",
        "os.chdir(path_data)\n",
        "\n",
        "model = SentenceTransformer(\"paraphrase-MiniLM-L6-v2\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "[nltk_data] Downloading package punkt to /home/azureuser/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package stopwords to\n[nltk_data]     /home/azureuser/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n"
        }
      ],
      "execution_count": 4,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1682700755292
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step: Combine text by case id, and lower text"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "analyzer = text_analyzer()\n",
        "cv_text = analyzer.read_word_file(\"./CV_Matt_Hanauer.docx\")\n",
        "job_description_text = analyzer.read_word_file(\"./job_example.docx\")\n",
        "\n",
        "\n",
        "cv_text_tokens = analyzer.preprocess_text(cv_text)\n",
        "job_description_text_tokens = analyzer.preprocess_text(job_description_text)\n",
        "similarity_score = analyzer.compare_texts(cv_text_tokens, job_description_text_tokens)\n",
        "cv_word_freq = analyzer.calculate_word_frequency(cv_text_tokens)\n",
        "job_description_word_freq = analyzer.calculate_word_frequency(\n",
        "    job_description_text_tokens\n",
        ")"
      ],
      "outputs": [],
      "execution_count": 5,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1682700765446
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the top 10 words from the job description\n",
        "top_n = 10\n",
        "top_job_description_words = [\n",
        "    word for word, freq in job_description_word_freq.most_common(top_n)\n",
        "]\n",
        "\n",
        "# Find the missing top 10 words in the resume\n",
        "missing_keywords = []\n",
        "for word in top_job_description_words:\n",
        "    if word not in cv_word_freq:\n",
        "        missing_keywords.append(word)\n",
        "\n",
        "missing_keywords"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 6,
          "data": {
            "text/plain": "['technical', 'availity', 'years', 'cloud', 'production']"
          },
          "metadata": {}
        }
      ],
      "execution_count": 6,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1682700769353
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.10",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "orig_nbformat": 4,
    "vscode": {
      "interpreter": {
        "hash": "98def2bbe4c17ca6f7446c23f6cb6fc94941e782507d089d8d0095a990429397"
      }
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      },
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}